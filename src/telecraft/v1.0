local tArgs = {...}
if #tArgs < 1 then
  print("Usage: telecraft <ip> [port]")
  return
end

if type(socket) ~= "table" or type(socket.connect) ~= "function" then
  print("CCTweaks Socket API not found")
  return
end

local function try(sPrefix, fMethod, fCallback, ...)
  local tPcall = {pcall(fMethod,...)}
  if not tPcall[1] then
    printError(sPrefix,tPcall[2]:match(": (.*)$"))
    if fCallback then
      fCallback()
    end
    return false
  end
  return unpack(tPcall)
end

local nDefaultPort = 327

local tSock, nSockId
do
  local tTry = {try("Failed to connect:",socket.connect,nil,tArgs[1],tonumber(tArgs[2]) or tArgs[2] or nDefaultPort)}
  if not tTry[1] then
    return
  end
  
  tSock = tTry[2]
  nSockId = tSock.id()
end

do
  local tEvent
  local nTimeout = os.startTimer(3)
  while true do
    tEvent = {os.pullEventRaw()}
    
    if tEvent[1] == "terminate" then
      tSock.close()
      printError("Terminated")
      return
    elseif tEvent[1] == "timer" and tEvent[2] == nTimeout then
      tSock.close()
      printError("Timed out")
      return
    elseif tEvent[1] == "socket_connect" and tEvent[2] == nSockId then
      break
    end
  end
end

local tTerm = term.current()
local nW, nH = tTerm.getSize()

local nB, nF = colors.black, colors.white
tTerm.setBackgroundColor(nB)
tTerm.setTextColor(nF)

local nX, nY = 1, 1
tTerm.setCursorBlink(true)
tTerm.setCursorPos(1,1)
tTerm.clear()

do
  local tEvent
  local nChecl = os.startTimer(3)
  while true do
    tEvent = {os.pullEventRaw()}
    
    if tEvent[1] == "terminate" then
      os.cancelTimer(nCheck)
      
      tSock.close()
      
      printError("Terminated")
      return
    elseif tEvent[1] == "timer" and tEvent[2] == nCheck then
      os.cancelTimer(nCheck)
      nCheck = os.startTimer(3)
      
      if not try("Disconnected:",tSock.checkConnected,tSock.close) then
        return
      end
    elseif tEvent[1] == "socket_message" and tEvent[2] == nSockId then
      do
        local tTry = {try("Disconnected:",tSock.read,tSock.close)}
        
        if not tTry[1] then
          os.cancelTimer(nCheck)
          return
        end
        
        local sMessage = tTry[2]
        for nChar = 1, #sMessage do
          local nChar = sMessage:sub(nChar,nChar):byte()
          if nChar == 7 then
            nB, nF = nF, nB
            term.setBackgroundColor(nB)
            term.setTextColor(nF)
          elseif nChar == 8 then
            if nX > 1 then
              nX = nX - 1
              term.setCursorPos(nX,nY)
            end
          elseif nChar == 9 then
            term.write("  ")
            nX = nX + 2
            if nX > nW then
              nX = 1
              if nY < nH then
                nY = nY + 1
              else
                term.scroll(1)
              end
              term.setCursorPos(nX,nY)
            end
          elseif nChar == 10 then
            nX = 1
            if nY < nH then
              nY = nY + 1
            else
              term.scroll(1)
            end
            term.setCursorPos(nX,nY)
          elseif nChar == 11 then
            if nY < nH then
              nY = nY + 1
              term.setCursorPos(nX,nY)
            else
              term.scroll(1)
            end
          elseif nChar == 12 then
            nX, nY = 1, 1
            term.setCursorPos(nX,nY)
            term.clear()
          elseif nChar == 13 then
            if nX > 1 then
              nX = 1
              term.setCursorPos(nX, nY)
            end
          else
            term.write(string.char(nChar))
            nX = nX + 1
            if nX > nW then
              nX = 1
              if nY < nH then
                nY = nY + 1
              else
                term.scroll(1)
              end
              term.setCursorPos(1,1)
            end
          end
        end
      end
    elseif tEvent[1] == "char" then
      if not try("Disconnected:",tSock.write,tSock.close,tEvent[2]) then
        os.cancelTimer(nCheck)
        return
      end
    elseif tEvent[1] == "key" then
      do
        local nByte = -1
        if tEvent[2] == keys.backspace then
          nByte = 8
        elseif tEvent[2] == keys.tab then
          nByte = 9
        elseif tEvent[2] == keys.enter then
          nByte = 10
        elseif tEvent[2] == keys.delete then
          nByte = 127
        end
        
        if nByte > -1 then
          if not try("Disconnected:",tSock.write,tSock.close,string.char(nByte)) then
            os.cancelTimer(nCheck)
            return
          end
        end
      end
    end
  end
end
